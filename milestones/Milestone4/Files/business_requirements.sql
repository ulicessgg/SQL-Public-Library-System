-- MySQL Script generated by Ulices Gonzalez
-- Thurs Nov 7 2024
-- Last Edited Dec 10 2024

USE libraryDB;
/*
     Business Requirements #1
     ----------------------------------------------------
     Purpose: Account Blocking on Patrons with Outstanding Debts
     
     Description: Due to patrons having a time limit and restrictions placed on their library checkouts there is the
				  possibility for them to garner fines that can land their account into delinquent status however
                  due to the manner in which current systems conducting these processes it often goes undone leaving
                  the library to handle the cost. This function will update a patrons account to delinquent and give
                  clerical staff the information need to charge the patrons as well as keep track of the items related
                  to the fines if any
     
     Challenge:   The major issue that somewhat impededes this function from being done normall is the amount of data that
				  needs to be accessed especially in the context of a libary as not only does it need to look at patrons,
                  transactions, payments, and items; but it also needs to access only select information before updating a 
                  users account before blocking them from future transactions.
     
     Implementation Plan:
        1. Join the transactions and patrons tables on the presence of delinquent patrons
        2. Join the payments and transactions tables on the presence of the same record number
        3. Upon joining, set a patrons status to delinquent if they owe more than a minimum amount
        4. Once patron(s) have been marked as delinquent Select patron information along with
		   transaction details for clerical staff to evaluate IF any debt is present still
        5. At the begining of the week clerical staff can make sure of this script to automatically
		   delcare patrons as delinquent due to outstanding fines and from there print out relavent information
           in order to contact patrons, inform them of the fines and the cause, and to send them an invoice

*/

DROP PROCEDURE IF EXISTS ReportDelinquents;

DELIMITER $$
CREATE PROCEDURE ReportDelinquents()
BEGIN
	UPDATE Patrons
	JOIN Transactions ON Patrons.libraryCardNumber = Transactions.patronCardNumber
	JOIN Payments ON Transactions.transactionID = Payments.transRecNo
	SET Patrons.is_delinquent = 1
	WHERE Payments.total_owed > 0.00;

	SELECT CONCAT(Patrons.first_name, ' ', Patrons.last_name) AS "Patron",
	       Patrons.email AS "Email",
	       Transactions.transactionID AS "Transaction ID",
	       Items.title AS "Transaction Item",
	       Items.item_barcode_number AS "Item Number",
	       Payments.total_owed AS "Total Owed"
           
	FROM Patrons
	JOIN Transactions ON Patrons.libraryCardNumber = Transactions.patronCardNumber
	JOIN Items ON Items.item_barcode_number = Transactions.transactionItem
	JOIN Payments ON Transactions.transactionID = Payments.transRecNo
	WHERE Payments.total_owed > 0.00;
END $$
DELIMITER ;

/*
     Business Requirements #2
     ----------------------------------------------------
     Purpose: Online Library Card Registration and E-Card Fufillment
     
     Description: More often than not many people are scared to come into the library as it can be
				  something unfamilar to them or something they have had bad experience with in the
				  past so in order to help differentiate the account processes this script will be
				  ran in order to create a users account and immediately create an e-card for them for
				  use of digital items and computers but still give them the chance to come in the future
				  to any library branch in their system and make a full service account.
     
     Challenge:   
     
     Implementation Plan:
        1. 
*/

DROP PROCEDURE IF EXISTS CreateNewUser ;

DELIMITER $$
CREATE PROCEDURE CreateNewUser(IN userEmail VARCHAR(64), IN userFirstName VARCHAR(32), IN userMiddleName VARCHAR(32),
							   IN userLastName VARCHAR(32), IN userIsDelinquent TINYINT, IN userDateOfBirth DATE)
BEGIN
    DECLARE existingCardNumber INT;
    SELECT Patrons.libraryCardNumber INTO existingCardNumber
    FROM Patrons
    WHERE Patrons.email = userEmail;
    
    IF existingCardNumber IS NOT NULL THEN
        DELETE FROM `E-Cards`
        WHERE E-Cards.libraryCardNo = existingCardNumber;
        DELETE FROM Patrons
        WHERE Patrons.libraryCardNumber = existingCardNumber;
    END IF;

    INSERT INTO Patrons (email, first_name, middle_name, last_name, is_delinquent) VALUES
    (userEmail, userFirstName, userMiddleName, userLastName, userIsDelinquent);

    SET existingCardNumber = LAST_INSERT_ID();
    INSERT INTO `E-Cards` (libraryCardNo, date_of_birth) VALUES 
    (existingCardNumber, userDateOfBirth);
END $$
DELIMITER ;

/*
     Business Requirements #3
     ----------------------------------------------------
     Purpose: 
     
     Description: 
     
     Challenge:   
     
     Implementation Plan:
        1. 
*/



/*
     Business Requirements #4
     ----------------------------------------------------
     Purpose: 
     
     Description:  
     
     Challenge:   
     
     Implementation Plan:
        1. 
*/

/*
     Business Requirements #5
     ----------------------------------------------------
     Purpose: Item Management, Shelf Checks, and Transaction Updates
     
     Description: As mentiioned in the first business requirement due to patrons having the risk of fines being added to there account
				  there is always room for error especially due to human miscalulation and handling of items. This script is meant to
                  run a shelf check which will check if a book that is linked to a fine has a return logged into the database and if it
                  does it will then check if a checkout is present. If a check out is present then there is an error due to a return
                  automatically having to delete a checkout from the database, this will be addressed by deleting the original checkout,
                  then we will check if a payment is needed on the item and if there is we will then delete that transaction record, 
                  remove delinqeuncy status from its respective patron, and lastly will delete the return to mark that the book is no
                  longer being processed and can be checked out once more. The return transaction is used soley to keep track if an item
                  is either missing but claimed returned since there are instances where it will not be properly processed upon return.
     
     Challenge:   Although not a challenge in the sense of the database the challenge of this requirement comes from using the proper
				  joins as I am not only comparing transactions I have to use the transaction table itself to diferentiate between a record
                  of a checkout, return, payment, the transactions themselves, patron information, and the item in question. Second to this
                  is also the challenge that comes from using a larger set of INTO statements to save information for deletion while also using
                  some of them as conditionals so I can ensure proper execution of deletions.
     
     Implementation Plan:
        1. Select information regarding relavent transactions
        2. Join checkout, payment, returns, and transaction tables for selection
        3. Save transaction infromation
        4. Create and check condition of check out being present
        5. Delete checkout from database along with parent info if present
        6. Create and check condition of fine being present
        7. Delete fine from database along with parent info if present
		8. Delete return from database along with parent info
        9. Remove delinquent status from patron as item has been accounted for
*/

DROP PROCEDURE IF EXISTS ShelfCheck;

DELIMITER $$
CREATE PROCEDURE ShelfCheck()
BEGIN
    DECLARE ReviewedPatron INT;
    DECLARE ReviewedItem INT;
    DECLARE ReviewedCheckout INT;
    DECLARE ReviewedReturn INT;
    DECLARE ReviewedFine INT;

    SELECT transaction1.patronCardNumber, 
		   transaction1.transactionItem, 
		   problemCheckout.transRecNo, 
           problemReturn.transRecNo,
           Payments.transRecNo
	INTO 
		 ReviewedPatron,
         ReviewedItem,
         ReviewedCheckout,
         ReviewedReturn,
         ReviewedFine
         
    FROM Transactions transaction1
    JOIN Checkouts problemCheckout ON transaction1.transactionID = problemCheckout.transRecNo
    JOIN Transactions transaction2 ON transaction1.transactionItem = transaction2.transactionItem
    JOIN Returns problemReturn ON transaction2.transactionID = problemReturn.transRecNo
    LEFT JOIN Payments ON Payments.transRecNo = transaction1.transactionID
    WHERE transaction1.transactionItem = transaction2.transactionItem;

    IF ReviewedCheckout IS NOT NULL THEN
        DELETE FROM Checkouts
        WHERE transRecNo = ReviewedCheckout;

        DELETE FROM Transactions
        WHERE transactionID = ReviewedCheckout;
        
        IF ReviewedFine IS NOT NULL THEN
			DELETE FROM Payments
			WHERE transRecNo = ReviewedFine;
			
			DELETE FROM Transactions
			WHERE transactionID = ReviewedFine;
		END IF;

        DELETE FROM Returns
        WHERE transRecNo = ReviewedReturn;
        
        DELETE FROM Transactions
        WHERE transactionID = ReviewedReturn;
        
        UPDATE Patrons
        SET is_delinquent = 0
        WHERE libraryCardNumber = ReviewedPatron;
    END IF;
END $$
DELIMITER ;
